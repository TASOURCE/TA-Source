/*=============================================================================
	ShadowDepthVertexShader.usf: Vertex shader for writing shadow depth.
	Copyright 1998-2011 Epic Games, Inc. All Rights Reserved.
=============================================================================*/

#include "Common.usf"
#include "Material.usf"
#include "VertexFactory.usf"

#ifndef OUTPUT_DEPTH_TO_COLOR
#define OUTPUT_DEPTH_TO_COLOR 0
#endif

#ifndef PERSPECTIVE_CORRECT_DEPTH
#define PERSPECTIVE_CORRECT_DEPTH 0
#endif

// PS3 use depth textures for projected shadows
#if PS3
	#undef SUPPORTS_DEPTH_TEXTURES
	#define SUPPORTS_DEPTH_TEXTURES 1
#endif

float4x4 ProjectionMatrix;

/** Used to normalize the outputted depth */
float InvMaxSubjectDepth;

/** Tweakable depth bias */
float DepthBias;

//@todo - make this a bool, bool shader parameters currently do not work in vertex shaders on Xbox 360 (TTP 125134)
float bClampToNearPlane;

void SetShadowDepthOutputs(float4 WorldPosition, out float4 OutPosition, out float ShadowDepth)
{
	OutPosition = MulMatrix(ProjectionMatrix, WorldPosition);

	// Clamp the vertex to the near plane if it is in front of the near plane
	// This has problems if some vertices of a triangle get clamped and others do not, also causes artifacts with non-ortho projections
	if (bClampToNearPlane && OutPosition.z < 0)
	{
		OutPosition.z = 0.000001f;
		OutPosition.w = 1.0f;
	}

	#if PERSPECTIVE_CORRECT_DEPTH
		ShadowDepth = OutPosition.z;
	#else
			// Output linear, normalized depth
		#if SUPPORTS_DEPTH_TEXTURES
			OutPosition.z = (OutPosition.z * InvMaxSubjectDepth + DepthBias) * OutPosition.w;
		#else
			#if !OUTPUT_DEPTH_TO_COLOR
				OutPosition.z = (OutPosition.z * InvMaxSubjectDepth + DepthBias) * OutPosition.w;
			#endif
			ShadowDepth = (OutPosition.z * InvMaxSubjectDepth + DepthBias);
		#endif
	#endif
}

#if USING_SM5_TESSELATION

// As defined for VS
struct FShadowDepthVSToDS
{
	FVertexFactoryInterpolantsVSToDS OutFactoryInterpolants;
	float4 OutPosition : VS_to_DS_Position;
};

struct FShadowDepthVSToPS
{
#if !MATERIALBLENDING_SOLID
	FVertexFactoryInterpolantsVSToPS OutFactoryInterpolants;
#endif
#if PERSPECTIVE_CORRECT_DEPTH || !SUPPORTS_DEPTH_TEXTURES
	float ShadowDepth : TEXCOORD4;
#endif
	float4 OutPosition : POSITION;
};

#define FPassSpecificVSToDS FShadowDepthVSToDS
#define FPassSpecificVSToPS FShadowDepthVSToPS

// Hooks for tessellators to retrieve attributes from vertices
float4 PassGetWorldPosition(FShadowDepthVSToDS Vtx)
{
	return Vtx.OutPosition;
}

float4 PassGetWorldNormal(FShadowDepthVSToDS Vtx)
{
	return VertexFactoryGetWorldNormal(Vtx.OutFactoryInterpolants);
}

FShadowDepthVSToDS PassInterpolate(FShadowDepthVSToDS a, float aInterp, FShadowDepthVSToDS b, float bInterp)
{
	FShadowDepthVSToDS O;
	O.OutFactoryInterpolants = VertexFactoryInterpolate(a.OutFactoryInterpolants, aInterp, b.OutFactoryInterpolants, bInterp);
	return O;
}

// X = edge, Y = Inside
float2 PassGetTessellationFactors(FPassSpecificVSToDS I)
{
	FMaterialTessellationParameters MaterialParameters = GetMaterialTessellationParameters(I.OutFactoryInterpolants, PassGetWorldPosition(I).xyz);
	return GetMaterialTessellationFactors(MaterialParameters);
}

FShadowDepthVSToPS PassFinalizeTessellationOutput(FShadowDepthVSToDS Interpolants, float4 WorldPosition)
{
	FShadowDepthVSToPS O;
	
#if !MATERIALBLENDING_SOLID
	O.OutFactoryInterpolants = VertexFactoryAssignInterpolants(Interpolants.OutFactoryInterpolants);
#endif

	// Calc displacement mapping
	FMaterialTessellationParameters MaterialParameters = GetMaterialTessellationParameters(Interpolants.OutFactoryInterpolants, WorldPosition.xyz);
	float3 WorldDisplacement = GetMaterialWorldDisplacement(MaterialParameters);

	WorldPosition.xyz += WorldDisplacement;

	SetShadowDepthOutputs(WorldPosition, O.OutPosition, O.ShadowDepth);

	return O;
}
	
#include "Tessellation.usf"

#endif // #if USING_SM5_TESSELATION

void Main(
	FVertexFactoryInput Input,
#if !USING_SM5_TESSELATION	
	#if !MATERIALBLENDING_SOLID
		out FVertexFactoryInterpolantsVSToPS OutFactoryInterpolants,
	#endif
	#if PERSPECTIVE_CORRECT_DEPTH || !SUPPORTS_DEPTH_TEXTURES
		out float ShadowDepth : TEXCOORD4, 
	#endif
	out float4 OutPosition : POSITION
#else
	out FVertexFactoryInterpolantsVSToDS OutFactoryInterpolants,
	out float4 OutPosition : VS_to_DS_Position
#endif 	

	)
{
	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float3x3 TangentBasis = VertexFactoryGetTangentBasis(Input, VFIntermediates);

	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentBasis);
	WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);

#if USING_SM5_TESSELATION	
	OutPosition = WorldPos;
	
	// Tessellated materials need vertex coords for displacement
	OutFactoryInterpolants = VertexFactoryGetInterpolantsVSToDS(Input, VFIntermediates);
	
#else

	#if !PERSPECTIVE_CORRECT_DEPTH && SUPPORTS_DEPTH_TEXTURES
		float ShadowDepth;
	#endif

	SetShadowDepthOutputs(WorldPos, OutPosition, ShadowDepth);
	
	#if !MATERIALBLENDING_SOLID
		// Masked materials need texture coords to clip
		OutFactoryInterpolants = VertexFactoryGetInterpolantsVSToPS(Input, VFIntermediates);
	#endif

#endif	// !USING_SM5_TESSELATION
}
