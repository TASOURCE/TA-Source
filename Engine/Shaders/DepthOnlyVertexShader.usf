/*=============================================================================
	DepthOnlyVertexShader.hlsl: Depth-only vertex shader.
	Copyright 1998-2011 Epic Games, Inc. All Rights Reserved.
=============================================================================*/

#include "Common.usf"
#include "Material.usf"
#include "VertexFactory.usf"

struct FDepthOnlyVSToPS
{
	#if !MATERIALBLENDING_SOLID
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 CameraVectorOrVertexColor : TEXCOORD4;
		float4 PixelPosition : TEXCOORD5;
	#endif

	float4 OutPosition : POSITION;
};

#if USING_SM5_TESSELATION	
	struct FDepthOnlyVSToDS
	{
		FVertexFactoryInterpolantsVSToDS FactoryInterpolants;

	#if !MATERIALBLENDING_SOLID && PER_PIXEL_CAMERA_VECTOR
		float4 CameraVectorOrVertexColor : TEXCOORD4;
	#endif
	
		float4 OutPosition : VS_To_DS_Position;
	};
	
	#define FDepthOnlyVSOutput FDepthOnlyVSToDS
	#define VertexFactoryGetInterpolants VertexFactoryGetInterpolantsVSToDS
#else
	#define FDepthOnlyVSOutput FDepthOnlyVSToPS
	#define VertexFactoryGetInterpolants VertexFactoryGetInterpolantsVSToPS
#endif

#if USING_SM5_TESSELATION	
	#define FPassSpecificVSToDS FDepthOnlyVSToDS
	#define FPassSpecificVSToPS FDepthOnlyVSToPS
	
	// Hooks for tessellators to retrieve attributes from vertices
	float4 PassGetWorldPosition(FDepthOnlyVSToDS Vtx)
	{
		return Vtx.OutPosition;
	}
	
	float4 PassGetWorldNormal(FDepthOnlyVSToDS Vtx)
	{
		return VertexFactoryGetWorldNormal(Vtx.FactoryInterpolants);
	}

	FDepthOnlyVSToDS PassInterpolate(FDepthOnlyVSToDS a, float aInterp, FDepthOnlyVSToDS b, float bInterp)
	{
		FDepthOnlyVSToDS O;
		
		O.FactoryInterpolants = VertexFactoryInterpolate(a.FactoryInterpolants, aInterp, b.FactoryInterpolants, bInterp);
		
		#if !MATERIALBLENDING_SOLID && PER_PIXEL_CAMERA_VECTOR
			// Interpolate vertex color
			TESSELLATION_INTERPOLATE_MEMBER(CameraVectorOrVertexColor);
		#endif

		return O;
	}

	// X = edge, Y = Inside
	float2 PassGetTessellationFactors(FDepthOnlyVSToDS I)
	{
		FMaterialTessellationParameters MaterialParameters = GetMaterialTessellationParameters(I.FactoryInterpolants, PassGetWorldPosition(I).xyz);
		return GetMaterialTessellationFactors(MaterialParameters);
	}

	FDepthOnlyVSToPS PassFinalizeTessellationOutput(FDepthOnlyVSToDS Interpolants, float4 WorldPosition)
	{
		FDepthOnlyVSToPS O;
		
		#if !MATERIALBLENDING_SOLID
			O.FactoryInterpolants = VertexFactoryAssignInterpolants(Interpolants.FactoryInterpolants);
		#endif
		
		#if !MATERIALBLENDING_SOLID && PER_PIXEL_CAMERA_VECTOR
			O.CameraVectorOrVertexColor = Interpolants.CameraVectorOrVertexColor;
		#endif
		
		// Calc displacement mapping
		FMaterialTessellationParameters MaterialParameters = GetMaterialTessellationParameters(Interpolants.FactoryInterpolants, WorldPosition.xyz);
		float3 WorldDisplacement = GetMaterialWorldDisplacement(MaterialParameters);

		WorldPosition.xyz += WorldDisplacement;
		
		// Apply effects of displacement
		#if !MATERIALBLENDING_SOLID && !PER_PIXEL_CAMERA_VECTOR
			O.CameraVectorOrVertexColor = 1;
			O.CameraVectorOrVertexColor.xyz = TransformWorldVectorToTangent(MaterialParameters.TangentToWorld,CameraPosition_DS.xyz - WorldPosition.xyz * CameraPosition_DS.w);
		#endif

		// Finally, transform position to clip-space
		O.OutPosition = MulMatrix(ViewProjectionMatrix_DS,WorldPosition);
			
		#if !MATERIALBLENDING_SOLID
			#if WORLD_POS
				O.PixelPosition = WorldPosition;
			#else
				O.PixelPosition = O.OutPosition;
			#endif
		#endif
		
		return O;
	}
	
	#include "Tessellation.usf"
#endif

#if VERTEXSHADER

void Main(
	FVertexFactoryInput Input,
	out FDepthOnlyVSOutput Output
	)
{
	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);

#if TERRAIN_VERTEX_FACTORY
	// Don't calculate TangentBasis here for terrain, as doing so causes self-z-fighting on xbox 360, regardless of any ISOLATE usage
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, float3x3(float3(0,0,0),float3(0,0,0),float3(0,0,0)));
#else
	float3x3 TangentBasis = VertexFactoryGetTangentBasis(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentBasis);
#endif
	// Isolate instructions used for world position offset on xbox 360, 
	// As these cause the optimizer to generate different position calculating instructions in each pass, resulting in self-z-fighting.
	// This is only necessary for shaders used in passes that have depth testing enabled.
	ISOLATE
	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}

#if USING_SM5_TESSELATION
	// Transformation is done in Domain shader when tessellating
	Output.OutPosition = WorldPos;
#else
	Output.OutPosition = MulMatrix(ViewProjectionMatrix,WorldPos);
#endif

#if !MATERIALBLENDING_SOLID || USING_SM5_TESSELATION
	// Masked and transparent materials need texture coords to clip, and tessellated
	// materials need texture coords to displace
	Output.FactoryInterpolants = VertexFactoryGetInterpolants(Input, VFIntermediates);
#endif

#if !MATERIALBLENDING_SOLID
	#if !USING_SM5_TESSELATION	
		#if WORLD_POS
			Output.PixelPosition = WorldPos;
		#else
			Output.PixelPosition = Output.OutPosition;
		#endif
	#endif

#if TERRAIN_VERTEX_FACTORY
	float3x3 TangentBasis = VertexFactoryGetTangentBasis(Input, VFIntermediates);
#endif

#if PER_PIXEL_CAMERA_VECTOR
	Output.CameraVectorOrVertexColor = VertexFactoryGetVertexColor(Input, VFIntermediates);
#elif !USING_SM5_TESSELATION
	Output.CameraVectorOrVertexColor = 1;
	// The mask may be dependent on the camera vector
	Output.CameraVectorOrVertexColor.xyz = VertexFactoryWorldToTangentSpace(Input,VFIntermediates,TangentBasis,CameraPosition.xyz - WorldPos.xyz * CameraPosition.w);
#endif

#endif
}

#endif // VERTEXSHADER
