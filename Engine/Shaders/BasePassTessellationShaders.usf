/*=============================================================================
	BasePassTessellationShaders.usf: Base pass domain and hull shaders
	Copyright 1998-2011 Epic Games, Inc. All Rights Reserved.
=============================================================================*/

#include "BasePassVertexCommon.usf"

FBasePassVSToDS PassInterpolate(FBasePassVSToDS a, float aInterp, FBasePassVSToDS b, float bInterp)
{
	FBasePassVSToDS O;
	
	O.FactoryInterpolants = VertexFactoryInterpolate(a.FactoryInterpolants, aInterp, b.FactoryInterpolants, bInterp);

	#if VERTEX_LIGHTMAP
		TESSELLATION_INTERPOLATE_MEMBER(BasePassInterpolants.LightMapA);
		TESSELLATION_INTERPOLATE_MEMBER(BasePassInterpolants.LightMapB);
	#else
		#if SIMPLE_VERTEX_LIGHTMAP
			TESSELLATION_INTERPOLATE_MEMBER(BasePassInterpolants.LightMapA);
		#endif
	#endif
	
	#if ENABLE_DIRECTIONAL_LIGHT
		TESSELLATION_INTERPOLATE_MEMBER(BasePassInterpolants.TangentLightVector);
	#endif

	#if ENABLE_MULTITYPE_BASEPASS_LIGHT
		TESSELLATION_INTERPOLATE_MEMBER(BasePassInterpolants.WorldLightVector);
	#endif

	TESSELLATION_INTERPOLATE_MEMBER(BasePassInterpolants.CameraVectorOrVertexColor);

	#if !MATERIAL_LIGHTINGMODEL_UNLIT
		TESSELLATION_INTERPOLATE_MEMBER(BasePassInterpolants.SkyVector);
	#else
		#if ENABLE_TRANSLUCENCY_DOF
			TESSELLATION_INTERPOLATE_MEMBER(BasePassInterpolants.TranslucencyDoFBlur);
		#endif		
	#endif

	return O;
}

FBasePassVSToPS PassFinalizeTessellationOutput(FBasePassVSToDS Interpolants, float4 WorldPosition)
{
	FBasePassVSToPS O;
	
	O.FactoryInterpolants = VertexFactoryAssignInterpolants(Interpolants.FactoryInterpolants);

	// Copy everything in the shared base class over to the pixel shader input
	(FSharedBasePassInterpolants)O.BasePassInterpolants = (FSharedBasePassInterpolants)Interpolants.BasePassInterpolants;
	
	// Calc displacement mapping
	FMaterialTessellationParameters MaterialParameters = GetMaterialTessellationParameters(Interpolants.FactoryInterpolants, WorldPosition.xyz);
	float3 WorldDisplacement = GetMaterialWorldDisplacement(MaterialParameters);

	WorldPosition.xyz += WorldDisplacement;
	
	// Transform position to clip-space
	O.Position = MulMatrix(ViewProjectionMatrix_DS,WorldPosition);
	
	// Calc position-dependent interps
	#if WORLD_POS
		O.BasePassInterpolants.PixelPosition = WorldPosition;
	#else
		O.BasePassInterpolants.PixelPosition = O.Position;
	#endif

	O.BasePassInterpolants.CameraVectorOrVertexColor = 1;
	#if !PER_PIXEL_CAMERA_VECTOR
		O.BasePassInterpolants.CameraVectorOrVertexColor.xyz = TransformWorldVectorToTangent(MaterialParameters.TangentToWorld,CameraPosition_DS.xyz - WorldPosition.xyz * CameraPosition_DS.w);
	#endif
	
	return O;
}

// X = edge, Y = Inside
float2 PassGetTessellationFactors(FPassSpecificVSToDS I)
{
	FMaterialTessellationParameters MaterialParameters = GetMaterialTessellationParameters(I.FactoryInterpolants, PassGetWorldPosition(I).xyz);
	return GetMaterialTessellationFactors(MaterialParameters);
}

// This gets us the MainHull and MainDomain shader definitions
#include "Tessellation.usf"
