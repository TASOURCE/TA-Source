/*=============================================================================
	SubsurfaceScatteringPixelShader.usf: Pixel shader for subsurface scattering
	Copyright 1998-2011 Epic Games, Inc. All Rights Reserved.
=============================================================================*/

#include "Common.usf"

/** The render target texture containing the sub-surface inscattering color. */
sampler2D SubsurfaceInscatteringTexture;

/** The render target texture containing the SSS attenuation parameters. */
sampler2D SubsurfaceScatteringAttenuationTexture;

/** The delta UVs for the samples. */
float4 SampleDeltaUVs[NUM_SAMPLES / 2];

/** Transform from clip-space with Z=W to view-space. */
float4x4 ClipToViewTransform;

/** RGBA8 linear texture containing random normals */
sampler2D RandomAngleTexture;

/** Buffer size / RandomAngleTexture size */
float4 NoiseScaleAndOffset;

float4 ScatteringAttenuation(float BaseToSampleDistance,float3 LogSubsurfaceAbsorptionColorPerDistance)
{
	// Compute the cumulative absorption color for the sample.
	float3 CumulativeAbsorptionColor = exp2(LogSubsurfaceAbsorptionColorPerDistance * BaseToSampleDistance);

	// Compute the distance attenuation for the sample.
	float DistanceFactor = saturate(1 / BaseToSampleDistance);

	return float4(
		DistanceFactor * CumulativeAbsorptionColor,
		DistanceFactor
		);
}

float4 ComputeInscatteringSample(
	float4 BasePosition,
	float3 LogSubsurfaceAbsorptionColorPerDistance,
	float WorldFilterRadius,
	float2 SampleDeltaUV,
	float2 SampleReflectionNormal
	)
{
	// Reflect the sample over a random normal.
	SampleDeltaUV = SampleDeltaUV - SampleReflectionNormal * dot(SampleDeltaUV,SampleReflectionNormal) * 2;

	// Add the sample offset to the current pixel's clip-space position, scaled by the world-space radius.
	// These coordinates are in clip-space, so the divide below will scale the world-space radius to the appropriate size on the screen.
	float4 SamplePosition = BasePosition + float4(SampleDeltaUV,0,0) * WorldFilterRadius;

	// Read the subsurface scattered light from the sample position.
	float3 SampleSubsurfaceInscattering = tex2Dlod(
		SubsurfaceInscatteringTexture,
		float4(SamplePosition.xy / SamplePosition.w * ScreenPositionScaleBias.xy + ScreenPositionScaleBias.wz,0,0)
		).rgb;

	// Derive the view-space vector from the output pixel to the sample pixel.
	float SampleW = PreviousDepthForShadows(SamplePosition);
	float3 BaseToSampleClipVector = float3(SamplePosition.xy / SamplePosition.w * SampleW,SampleW) - float3(BasePosition.xy,BasePosition.w);
	float4 BaseToSampleViewVector = MulMatrix(ClipToViewTransform,float4(BaseToSampleClipVector,0));

	// Debug code to show the sampling pattern.
#if 0
	if(length(SamplePosition.xy / SamplePosition.w) >= (4 / 1000.0))
	{
		SampleSubsurfaceInscattering *= 0.1;
	}
	else
	{
		SampleSubsurfaceInscattering *= 100;
	}
#endif

	// Attenuate and return this sample's contribution to the subsurface scattering.
	float BaseToSampleDistance = length(BaseToSampleViewVector);
	float4 Attenuation = ScatteringAttenuation(
		BaseToSampleDistance,
		LogSubsurfaceAbsorptionColorPerDistance
		);
	return float4(SampleSubsurfaceInscattering * Attenuation.rgb,Attenuation.a);
}

/** output distortion offsets as color so they can be accumulated (via blending) */
void Main(
	float4 ScreenPosition : TEXCOORD0,
	out float4 OutColor : COLOR0
	)
{
	// Read the subsurface scattering attenuation parameters for this pixel.
	float2 ScreenBufferUVs = ScreenPosition.xy * ScreenPositionScaleBias.xy + ScreenPositionScaleBias.wz;
	float4 SubsurfaceScatteringAttenuation = tex2Dlod(SubsurfaceScatteringAttenuationTexture,float4(ScreenBufferUVs,0,0));
	float WorldFilterRadius = SubsurfaceScatteringAttenuation.w;
	float3 LogSubsurfaceAbsorptionColorPerDistance = log2(SubsurfaceScatteringAttenuation.rgb) / WorldFilterRadius;

	// If the subsurface scattering radius is 0, then don't compute subsurface scattering for this pixel.
	float3 SubsurfaceOutscattering = 0;
	BRANCH
	if(SubsurfaceScatteringAttenuation.w > 0.01)
	{
		// Compute the real screen position from the quad's screen position and the stored depth at that position.
		float RealScreenW = PreviousDepthForShadows(ScreenPosition);
		float4 RealScreenPosition = float4(
			ScreenPosition.xy * RealScreenW,
			RealScreenW * MinZ_MaxZRatio[1] + MinZ_MaxZRatio[0],
			RealScreenW
			);

		// Look up a random normal to use to reflect the sample delta UVs.
		float2 SampleReflectionNormal = tex2Dlod(RandomAngleTexture, float4(ScreenBufferUVs * NoiseScaleAndOffset.xy + NoiseScaleAndOffset.wz,0,0)).xy * 2 - 1;

		// Sample the subsurface scattering.
		float4 SubsurfaceOutscatteringNumeratorAndDenominator = 0;
		LOOP
		for(int SamplePairIndex = 0;SamplePairIndex < NUM_SAMPLES / 2;++SamplePairIndex)
		{
			SubsurfaceOutscatteringNumeratorAndDenominator += ComputeInscatteringSample(
				RealScreenPosition,
				LogSubsurfaceAbsorptionColorPerDistance,
				WorldFilterRadius,
				SampleDeltaUVs[SamplePairIndex].xy,
				SampleReflectionNormal
				);
			SubsurfaceOutscatteringNumeratorAndDenominator += ComputeInscatteringSample(
				RealScreenPosition,
				LogSubsurfaceAbsorptionColorPerDistance,
				WorldFilterRadius,
				SampleDeltaUVs[SamplePairIndex].wz,
				SampleReflectionNormal
				);
		}
		SubsurfaceOutscattering = SubsurfaceOutscatteringNumeratorAndDenominator.rgb / max(0.0001f,SubsurfaceOutscatteringNumeratorAndDenominator.a);
	}

	OutColor = RETURN_COLOR(float4(SubsurfaceOutscattering,0));
}


